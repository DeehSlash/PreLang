#Options
GenerateScanner = true
GenerateParser = false
Language = Java
ScannerName = Lexico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
#RegularDefinitions
ignore: [\t\r\s]+|(#.*)|(##(.|\n)*##)
identifier: [a-zA-Z_][a-zA-Z0-9_]*

// TYPES
int: [0-9]+
float: [0-9]*\.[0-9]+
boolean: true | TRUE | false | FALSE
binary: 0b[0-1]+
hexadecimal: 0x[0-9a-fA-F]+
string: \"[^\"]*\"


#Tokens
: {ignore}
NEW_LINE: \n

VAR: "$"{identifier}
CONST: "&"{identifier}
FUNCTION: "@"{identifier}

// CONDITIONAL
IF: "if"
ELSE: "else"
ELSIF: "elsif"
SWITCH: "switch"
CASE: "case"
DEFAULT: "default"

// LOOP
WHILE: "while"
DO: "do"
FOR: "for"
CONTINUE: "continue"

// OTHERS RESERVED WORDS
BREAK: "break" 
COMMA: ","
STRUCTURE_REFERENCE: "."
COLON: ":"
RETURN: "return"
IN: "in"
NULL: "null"

SCOPE_OPEN: "{"
SCOPE_CLOSE: "}"

SUBGROUP_OPEN: "("
SUBGROUP_CLOSE: ")"

INDEX_OPEN: "["
INDEX_CLOSE: "]"

// VALUES
INT: {int}
FLOAT: {float}
BOOLEAN: {boolean}
BINARY: {binary}
HEXADECIMAL: {hexadecimal}
STRING: {string}

// ARITHMETIC OPERATORS
OP_ASSIGN: "="
OP_ADD: "+"
OP_SUB: "-"
OP_MULT: "*"
OP_DIV: "/"
OP_MOD: "%"
OP_POW: "^"
OP_INC: "++"
OP_DEC: "--"

// RELATIONAL OPERATORS
OP_LT: "<"
OP_LTE: "<="
OP_EQ: "=="
OP_NEQ: "!="
OP_GT: ">"
OP_GTE: ">="

// LOGICAL OPERATORS
OP_AND: "&&"
OP_OR: "||"
OP_NOT: "!"

// BITWISE OPERATORS
OP_BW_NOT: "~"
OP_BW_AND: "&"
OP_BW_OR: "|"
OP_BW_XOR: "^"
OP_BW_LS: "<<"
OP_BW_RS: ">>"

// PRIMITIVE TYPES - NOT USED (IMPLICIT TYPING)
TYPE_INT: "int"
TYPE_FLOAT: "float"
TYPE_DOUBLE: "double"
TYPE_STRING: "string"
TYPE_CHAR: "char"
TYPE_BOOLEAN: "boolean"
TYPE_STRING: "string"
